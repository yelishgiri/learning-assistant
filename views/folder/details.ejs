<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= folder.name %> - Folder Details</title>
    <link rel="stylesheet" href="/folder/details/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
  </head>
  <body>
    <header class="header">
      <div class="container">
        <div class="header-content">
          <div class="logo">
            <i class="fas fa-cloud"></i>
            <span>Studyo</span>
          </div>
          <div class="user-info">
            <span>Welcome, <%= user.first_name %> <%= user.last_name %></span>
            <div class="user-avatar">
              <%= user.first_name.charAt(0) %><%= user.last_name.charAt(0) %>
            </div>
          </div>
        </div>
      </div>
    </header>
    <!-- Main Content -->
    <main class="main-content">
      <div class="container">
        <!-- Breadcrumb -->
        <div class="breadcrumb">
          <a href="/dashboard" class="breadcrumb-link">
            <i class="fas fa-home"></i>
            Home
          </a>
          <i class="fas fa-chevron-right breadcrumb-separator"></i>
          <span class="breadcrumb-current"><%= folder.name %></span>
        </div>

        <!-- Folder Header -->
        <div class="folder-header">
          <div class="folder-header-content">
            <div class="folder-title">
              <div class="folder-icon-large">
                <i class="fas fa-folder"></i>
              </div>
              <div class="folder-details">
                <h1><%= folder.name %></h1>
                <div class="folder-meta-info">
                  <span class="meta-item">
                    <i class="fas fa-calendar"></i>
                    Created: <%= new
                    Date(folder.created_at).toLocaleDateString() %>
                  </span>
                  <span class="meta-item">
                    <i class="fas fa-user"></i>
                    Author: <%= folder.author.username %>
                  </span>
                </div>
              </div>
            </div>
            <div class="folder-actions">
              <button class="btn btn-secondary">
                <i class="fas fa-edit"></i>
                Edit
              </button>
              <button class="btn btn-primary">
                <i class="fas fa-share"></i>
                Share
              </button>
            </div>
          </div>
        </div>

        <!-- Music Bar Section -->
        <div class="music-section">
          <div class="music-card">
            <div class="music-header">
              <h3>
                <i class="fas fa-music"></i>
                Study Music
              </h3>
              <p>AI-generated music optimized for your study materials</p>
            </div>
            <div class="music-content">
              <div id="music-player" class="music-player">
                <div id="music-loading" class="music-loading" style="display: none;">
                  <div class="loading-spinner"></div>
                  <p>Generating your study music...</p>
                </div>
                <div id="music-ready" class="music-ready" style="display: none;">
                  <div class="music-info">
                    <div class="music-cover">
                      <img id="music-cover-img" src="" alt="Music Cover" />
                    </div>
                    <div class="music-details">
                      <h4 id="music-title">Loading...</h4>
                      <p id="music-description">Analyzing your study materials...</p>
                      <div class="queue-info">
                        <span id="track-counter">Track 1 of 1</span>
                        <span id="queue-status" class="queue-status">Queue Active</span>
                      </div>
                      <div id="queue-visualization" class="queue-visualization" style="display: none;">
                        <div class="queue-tracks">
                          <div id="queue-track-0" class="queue-track current">
                            <div class="track-status">
                              <i class="fas fa-play"></i>
                            </div>
                            <div class="track-info">
                              <span class="track-title">Current Track</span>
                              <span class="track-status-text">Playing</span>
                            </div>
                          </div>
                          <div id="queue-track-1" class="queue-track next" style="display: none;">
                            <div class="track-status generating">
                              <div class="loading-spinner-small"></div>
                            </div>
                            <div class="track-info">
                              <span class="track-title">Next Track</span>
                              <span class="track-status-text">Generating...</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="music-controls">
                    <div class="skip-controls">
                      <button id="skip-previous-btn" class="skip-btn" disabled>
                        <i class="fas fa-step-backward"></i>
                      </button>
                      <button id="skip-next-btn" class="skip-btn" disabled>
                        <i class="fas fa-step-forward"></i>
                      </button>
                    </div>
                    <audio id="music-audio" controls style="width: 100%;">
                      <source id="music-source" src="" type="audio/mpeg">
                      Your browser does not support the audio element.
                    </audio>
                  </div>
                </div>
                <div id="music-generate" class="music-generate">
                  <button id="generate-music-btn" class="btn btn-primary">
                    <i class="fas fa-music"></i>
                    Generate Study Music
                  </button>
                  <p class="music-hint">Music will be tailored to your study materials</p>
                </div>
                
                <div id="music-regenerate" class="music-regenerate" style="display: none;">
                  <button id="regenerate-music-btn" class="btn btn-secondary">
                    <i class="fas fa-redo"></i>
                    Regenerate Study Music
                  </button>
                  <p class="music-hint">Generate fresh music for your study materials</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Share Link Section -->
        <% if (folder.shareLink) { %>
        <div class="share-section">
          <div class="share-card">
            <div class="share-header">
              <h3>
                <i class="fas fa-link"></i>
                Shared Link
              </h3>
            </div>
            <div class="share-content">
              <div class="share-link">
                <input
                  type="text"
                  value="https://folder.id/<%= folder.id %>"
                  readonly
                  class="share-input"
                />
                <button class="btn btn-secondary copy-btn">
                  <i class="fas fa-copy"></i>
                  Copy
                </button>
              </div>
              <div class="share-meta">
                <span class="share-info">
                  <i class="fas fa-clock"></i>
                  Expires: <%= new Date(folder.expiresAt).toLocaleDateString()
                  %>
                </span>
                <span class="share-info">
                  <i class="fas fa-calendar-plus"></i>
                  Created: <%= new Date(folder.createdAt).toLocaleDateString()
                  %>
                </span>
              </div>
            </div>
          </div>
        </div>
        <% } %>

        <!-- Files Section -->
        <div class="files-section">

          <div class="section-header">
            <div class="section-title">
              <h2>Study Materials</h2>
              <p>Manage your uploaded study materials</p>
            </div>
            <form action="/file/upload" method="post" enctype="multipart/form-data" style="display:inline-block;">
              <input type="hidden" name="folder" value="<%= folder.id %>" />
              <input type="file" name="file" id="fileInput" style="display:none;" multiple onchange="updateFileNameDisplay()" />
              <button class="btn btn-primary" type="button" onclick="document.getElementById('fileInput').click()">
                <i class="fas fa-plus"></i> Upload Study Materials
              </button>
              <span id="filename" class="filename-display"></span>
              <button class="btn btn-success" type="submit" style="margin-left:0.5em;">Submit</button>
            </form>
          </div>

          <% if (folder.files && folder.files.length > 0) { %>
          <div class="files-grid">
            <% folder.files.forEach(function(file) { %>
            <div class="file-card">
              <div class="file-icon">
                <i class="fas fa-file"></i>
              </div>
              <div class="file-info">
                <div class="file-name"><%= file.name %></div>
                <div class="file-meta">
                  <span class="file-size">
                    <i class="fas fa-hdd"></i>
                    <%= (file.size / 1024).toFixed(2) %> KB
                  </span>
                  <span class="file-date">
                    <i class="fas fa-calendar"></i>
                    <%= new Date(file.createdAt).toLocaleDateString() %>
                  </span>
                  <span class="file-author">
                    <i class="fas fa-user"></i>
                    <%= file.author ? file.author.username : '' %>
                  </span>
                </div>
                <% if (file.summary) { %>
                  <div class="file-summary-preview" style="margin-top: 0.5rem; background: #f8fafc; padding: 0.5rem; border-radius: 6px; font-size: 0.95em;">
                    <strong>Summary:</strong> <%= file.summary.length > 200 ? file.summary.slice(0, 200) + '...' : file.summary %>
                    <a href="/file/<%= file.id %>/summary" class="btn btn-secondary" style="margin-left: 1rem; font-size: 0.9em; padding: 0.2em 0.7em;">View Full</a>
                  </div>
                <% } else { %>
                  <form action="/file/<%= file.id %>/summary" method="POST" style="margin-top: 0.5rem; display: inline-block;">
                    <button class="btn btn-primary" type="submit" style="font-size: 0.9em; padding: 0.2em 0.7em;">
                      Generate Summary
                    </button>
                  </form>
                <% } %>
              </div>
              <div class="file-actions">
                <form action="/file/<%= file.id %>/download" method="get" style="display:inline;">
                  <button class="action-btn" title="Download" type="submit">
                    <i class="fas fa-download"></i>
                  </button>
                </form>
                <form action="/file/<%= file.id %>/share" method="post" style="display:inline;">
                  <button class="action-btn" title="Share" type="submit">
                    <i class="fas fa-share"></i>
                  </button>
                </form>
                <form action="/file/<%= file.id %>/delete" method="post" style="display:inline;" onsubmit="return confirm('Are you sure you want to delete this file?');">
                  <button class="action-btn" title="Delete" type="submit">
                    <i class="fas fa-trash"></i>
                  </button>
                </form>
              </div>
    <script>
      function updateFileNameDisplay() {
        const input = document.getElementById('fileInput');
        const label = document.getElementById('filename');
        if (input.files && input.files.length > 0) {
          const names = Array.from(input.files).map(f => f.name).join(', ');
          label.textContent = names;
        } else {
          label.textContent = 'No files selected';
        }
      }
    </script>
            </div>
            <% }); %>
          </div>
          <% } else { %>
          <div class="empty-state">
            <div class="empty-icon">
              <i class="fas fa-folder-open"></i>
            </div>
            <h3>No Study Materials Found</h3>
            <p>
              Nothing found. Please upload some study materials so that we can see them
              here.
            </p>
            <button class="btn btn-primary">
              <i class="fas fa-upload"></i>
              Upload Your First Study Material
            </button>
          </div>
          <% } %>
        </div>
      </div>
    </main>

    <script>
      // Copy to clipboard functionality
      document
        .querySelector(".copy-btn")
        ?.addEventListener("click", function () {
          const input = document.querySelector(".share-input");
          input.select();
          document.execCommand("copy");

          const btn = this;
          const originalText = btn.innerHTML;
          btn.innerHTML = '<i class="fas fa-check"></i> Copied!';
          btn.classList.add("btn-success");

          setTimeout(() => {
            btn.innerHTML = originalText;
            btn.classList.remove("btn-success");
          }, 2000);
        });

      // Music generation functionality
      const folderId = <%= folder.id %>;
      let musicCheckInterval;
      let currentTrackIndex = 0;
      let totalTracks = 1;

      // Check if folder already has music
      async function checkExistingMusic() {
        try {
          const response = await fetch(`/folder/${folderId}/music`);
          const data = await response.json();
          
          if (data.hasMusic) {
            if (data.status === 'complete' && data.audioUrl) {
              showMusicReady(data);
              // Check for queue and current track
              checkCurrentTrack();
            } else if (data.status === 'generating' || data.status === 'streaming') {
              showMusicLoading();
              startMusicStatusCheck();
            } else {
              // Music exists but not ready, show regenerate option
              showMusicRegenerate();
            }
          } else {
            showMusicGenerate();
          }
        } catch (error) {
          console.error('Error checking existing music:', error);
          showMusicGenerate();
        }
      }

      // Check current track from queue
      async function checkCurrentTrack() {
        try {
          const response = await fetch(`/folder/${folderId}/current-track`);
          const data = await response.json();
          
          if (data.success) {
            currentTrackIndex = data.currentIndex;
            totalTracks = data.totalTracks;
            updateSkipButtons(data.hasNext, data.hasPrevious);
            updateTrackCounter();
            updateQueueVisualization(data.queue);
            
            // If current track is ready, load it
            if (data.track.status === 'complete' && data.track.audioUrl) {
              loadTrack(data.track);
            } else if (data.track.status === 'generating' || data.track.status === 'streaming') {
              showMusicLoading();
            }
          }
        } catch (error) {
          console.error('Error checking current track:', error);
        }
      }

      // Update queue visualization
      function updateQueueVisualization(queue) {
        if (!queue || queue.length === 0) {
          document.getElementById('queue-visualization').style.display = 'none';
          return;
        }

        document.getElementById('queue-visualization').style.display = 'block';
        
        // Update current track
        const currentTrack = queue[currentTrackIndex];
        if (currentTrack) {
          const currentElement = document.getElementById('queue-track-0');
          const statusIcon = currentElement.querySelector('.track-status i');
          const statusText = currentElement.querySelector('.track-status-text');
          const title = currentElement.querySelector('.track-title');
          
          title.textContent = currentTrack.title || 'Current Track';
          
          if (currentTrack.status === 'complete') {
            statusIcon.className = 'fas fa-play';
            statusText.textContent = 'Ready';
            currentElement.className = 'queue-track current ready';
          } else if (currentTrack.status === 'streaming') {
            statusIcon.className = 'fas fa-spinner fa-spin';
            statusText.textContent = 'Streaming...';
            currentElement.className = 'queue-track current streaming';
          } else {
            statusIcon.className = 'fas fa-spinner fa-spin';
            statusText.textContent = 'Generating...';
            currentElement.className = 'queue-track current generating';
          }
        }

        // Update next track
        const nextTrack = queue[currentTrackIndex + 1];
        const nextElement = document.getElementById('queue-track-1');
        
        if (nextTrack) {
          nextElement.style.display = 'flex';
          const nextTitle = nextElement.querySelector('.track-title');
          const nextStatusText = nextElement.querySelector('.track-status-text');
          const nextStatusIcon = nextElement.querySelector('.track-status');
          
          nextTitle.textContent = nextTrack.title || 'Next Track';
          
          if (nextTrack.status === 'complete') {
            nextStatusIcon.innerHTML = '<i class="fas fa-check"></i>';
            nextStatusText.textContent = 'Ready';
            nextElement.className = 'queue-track next ready';
          } else {
            nextStatusIcon.innerHTML = '<div class="loading-spinner-small"></div>';
            nextStatusText.textContent = 'Generating...';
            nextElement.className = 'queue-track next generating';
          }
        } else {
          nextElement.style.display = 'none';
        }
      }

      // Generate new music
      async function generateMusic() {
        try {
          showMusicLoading();
          
          const response = await fetch(`/folder/${folderId}/generate`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          const data = await response.json();
          
          if (data.success) {
            startMusicStatusCheck();
          } else {
            throw new Error(data.message || 'Failed to generate music');
          }
        } catch (error) {
          console.error('Error generating music:', error);
          alert('Error generating music: ' + error.message);
          showMusicGenerate();
        }
      }

      // Regenerate music
      async function regenerateMusic() {
        try {
          showMusicLoading();
          
          const response = await fetch(`/folder/${folderId}/regenerate`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          const data = await response.json();
          
          if (data.success) {
            startMusicStatusCheck();
          } else {
            throw new Error(data.message || 'Failed to regenerate music');
          }
        } catch (error) {
          console.error('Error regenerating music:', error);
          alert('Error regenerating music: ' + error.message);
          showMusicRegenerate();
        }
      }

      // Check music generation status
      async function checkMusicStatus() {
        try {
          const response = await fetch(`/folder/${folderId}/status`);
          const data = await response.json();
          
          if (data.status === 'complete' && data.audioUrl) {
            showMusicReady(data);
            clearInterval(musicCheckInterval);
          } else if (data.status === 'error') {
            throw new Error('Music generation failed');
          }
        } catch (error) {
          console.error('Error checking music status:', error);
          clearInterval(musicCheckInterval);
          showMusicGenerate();
        }
      }

      // Start checking music status every 5 seconds
      function startMusicStatusCheck() {
        musicCheckInterval = setInterval(checkMusicStatus, 5000);
      }

      // Show different UI states
      function showMusicGenerate() {
        document.getElementById('music-generate').style.display = 'block';
        document.getElementById('music-regenerate').style.display = 'none';
        document.getElementById('music-loading').style.display = 'none';
        document.getElementById('music-ready').style.display = 'none';
      }

      function showMusicRegenerate() {
        document.getElementById('music-generate').style.display = 'none';
        document.getElementById('music-regenerate').style.display = 'block';
        document.getElementById('music-loading').style.display = 'none';
        document.getElementById('music-ready').style.display = 'none';
      }

      function showMusicLoading() {
        document.getElementById('music-generate').style.display = 'none';
        document.getElementById('music-regenerate').style.display = 'none';
        document.getElementById('music-loading').style.display = 'block';
        document.getElementById('music-ready').style.display = 'none';
      }

      function showMusicReady(data) {
        document.getElementById('music-generate').style.display = 'none';
        document.getElementById('music-regenerate').style.display = 'block';
        document.getElementById('music-loading').style.display = 'none';
        document.getElementById('music-ready').style.display = 'block';
        
        if (data.title) {
          document.getElementById('music-title').textContent = data.title;
        }
        if (data.imageUrl) {
          document.getElementById('music-cover-img').src = data.imageUrl;
        }
        if (data.audioUrl) {
          document.getElementById('music-source').src = data.audioUrl;
          document.getElementById('music-audio').load();
        }
        
        // Show queue visualization if we have queue data
        if (data.queue && data.queue.length > 0) {
          updateQueueVisualization(data.queue);
        }
      }

      // Skip to next track
      async function skipNext() {
        try {
          const response = await fetch(`/folder/${folderId}/skip-next`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
          });
          
          const data = await response.json();
          if (data.success) {
            currentTrackIndex = data.currentIndex;
            totalTracks = data.totalTracks;
            updateTrackCounter();
            updateSkipButtons(data.hasNext, data.hasPrevious);
            
            if (data.track.status === 'complete' && data.track.audioUrl) {
              loadTrack(data.track);
              showMusicReady(data.track);
            } else {
              showMusicLoading();
              startMusicStatusCheck();
            }
          }
        } catch (error) {
          console.error('Error skipping to next track:', error);
        }
      }

      // Skip to previous track
      async function skipPrevious() {
        try {
          const response = await fetch(`/folder/${folderId}/skip-previous`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
          });
          
          const data = await response.json();
          if (data.success) {
            currentTrackIndex = data.currentIndex;
            totalTracks = data.totalTracks;
            updateTrackCounter();
            updateSkipButtons(data.hasNext, data.hasPrevious);
            
            if (data.track.status === 'complete' && data.track.audioUrl) {
              loadTrack(data.track);
              showMusicReady(data.track);
            } else {
              showMusicLoading();
              startMusicStatusCheck();
            }
          }
        } catch (error) {
          console.error('Error skipping to previous track:', error);
        }
      }

      // Load a track into the player
      function loadTrack(track) {
        if (track.title) {
          document.getElementById('music-title').textContent = track.title;
        }
        if (track.imageUrl) {
          document.getElementById('music-cover-img').src = track.imageUrl;
        }
        if (track.audioUrl) {
          document.getElementById('music-source').src = track.audioUrl;
          document.getElementById('music-audio').load();
        }
      }

      // Update skip button states
      function updateSkipButtons(hasNext, hasPrevious) {
        document.getElementById('skip-next-btn').disabled = !hasNext;
        document.getElementById('skip-previous-btn').disabled = !hasPrevious;
      }

      // Update track counter
      function updateTrackCounter() {
        document.getElementById('track-counter').textContent = `Track ${currentTrackIndex + 1} of ${totalTracks}`;
      }

      // Auto-transition to next track when current ends
      function setupAutoTransition() {
        const audio = document.getElementById('music-audio');
        audio.addEventListener('ended', async () => {
          console.log('Track ended, checking for next track...');
          try {
            const response = await fetch(`/folder/${folderId}/current-track`);
            const data = await response.json();
            
            if (data.success && data.hasNext) {
              await skipNext();
            } else {
              // Generate next track if queue is empty
              console.log('Generating next track...');
              await generateMusic();
            }
          } catch (error) {
            console.error('Error in auto-transition:', error);
          }
        });
      }

      // Event listeners
      document.getElementById('generate-music-btn').addEventListener('click', generateMusic);
      document.getElementById('regenerate-music-btn').addEventListener('click', regenerateMusic);
      document.getElementById('skip-next-btn').addEventListener('click', skipNext);
      document.getElementById('skip-previous-btn').addEventListener('click', skipPrevious);

      // Periodic queue check
      function startQueueCheck() {
        setInterval(async () => {
          try {
            const response = await fetch(`/folder/${folderId}/current-track`);
            const data = await response.json();
            
            if (data.success) {
              currentTrackIndex = data.currentIndex;
              totalTracks = data.totalTracks;
              updateTrackCounter();
              updateSkipButtons(data.hasNext, data.hasPrevious);
              updateQueueVisualization(data.queue);
              
              // Update current track if ready
              if (data.track.status === 'complete' && data.track.audioUrl) {
                const audio = document.getElementById('music-audio');
                if (audio.paused && audio.src !== data.track.audioUrl) {
                  loadTrack(data.track);
                }
              }
            }
          } catch (error) {
            console.error('Error in periodic queue check:', error);
          }
        }, 3000); // Check every 3 seconds
      }

      // Initialize music bar
      checkExistingMusic();
      setupAutoTransition();
      startQueueCheck();
    </script>
  </body>
</html>
